// // OrderFormShort.tsx
import { useState } from 'react';
import './orderFormShort.scss';

interface ShortOrderFormProps {
  onSuccess?: () => void;
  title?: string;
  subtitle?: string;
}

const OrderFormShort = ({ 
  onSuccess, 
  title = "–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç", 
  subtitle = "–û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç" 
}: ShortOrderFormProps) => {
  const [phone, setPhone] = useState('');
  const [contactMethod, setContactMethod] = useState<'call' | 'telegram' | 'whatsapp'>('call');
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const validatePhone = (phone: string) => {
    const cleanedPhone = phone.replace(/\D/g, '');
    return cleanedPhone.length >= 10;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validatePhone(phone)) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      return;
    }
    
    setIsLoading(true);
    setError('');
    
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
      await fetch('/api.php', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: '7911798658',
          text: `üìû –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: ${getContactMethodName(contactMethod)}`,
        }),
      });
      
      setIsSubmitted(true);
      setIsLoading(false);
      if (onSuccess) onSuccess();
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
      setIsLoading(false);
      console.log('err –∑–∞—á–µ–º —Ç–æ', err)
    }
  };

  const getContactMethodName = (method: string) => {
    switch (method) {
      case 'call': return '–ü–æ–∑–≤–æ–Ω–∏—Ç—å';
      case 'telegram': return 'Telegram';
      case 'whatsapp': return 'WhatsApp';
      default: return '';
    }
  };


  // –Ω–∞–¥–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å
  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const input = e.target.value;
    const cleaned = input.replace(/\D/g, '');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä–µ
    let countryCode = '';
    let phoneDigits = '';
    
    if (cleaned.startsWith('8')) {
      // –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8
      countryCode = '+7';
      phoneDigits = cleaned.substring(1);
    } else if (cleaned.startsWith('7')) {
      // –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7
      countryCode = '+7';
      phoneDigits = cleaned.substring(1);
    } else if (cleaned.startsWith('9') && cleaned.length === 11) {
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
      countryCode = '+7';
      phoneDigits = cleaned;
    } else if (cleaned.length > 0) {
      // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä
      countryCode = `+${cleaned.charAt(0)}`;
      phoneDigits = cleaned.substring(1);
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞
    const maxDigits = countryCode === '+7' ? 10 : 15; // 10 –¥–ª—è –†–æ—Å—Å–∏–∏, 15 –¥–ª—è –¥—Ä—É–≥–∏—Ö
    phoneDigits = phoneDigits.substring(0, maxDigits);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    let formattedValue = countryCode;
    
    if (phoneDigits.length > 0) {
      if (countryCode === '+7') {
        // –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: +7 (XXX) XXX-XX-XX
        formattedValue += ' (' + phoneDigits.substring(0, 3);
        
        if (phoneDigits.length > 3) {
          formattedValue += ') ' + phoneDigits.substring(3, 6);
        }
        if (phoneDigits.length > 6) {
          formattedValue += '-' + phoneDigits.substring(6, 8);
        }
        if (phoneDigits.length > 8) {
          formattedValue += '-' + phoneDigits.substring(8, 10);
        }
      } else {
        // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: +X (XXX) XXX-XXXX
        formattedValue += ' (' + phoneDigits.substring(0, 3);
        
        if (phoneDigits.length > 3) {
          formattedValue += ') ' + phoneDigits.substring(3, 6);
        }
        if (phoneDigits.length > 6) {
          formattedValue += '-' + phoneDigits.substring(6);
        }
      }
    }

    setPhone(formattedValue);
  };

  return (
    <div className="short-order-form">
      {!isSubmitted ? (
        <>
          <div className="form-header">
            <h3>{title}</h3>
            <p>{subtitle}</p>
          </div>
          
          <form onSubmit={handleSubmit} className="order-form">
            <div className="input-group">
              <label htmlFor="phone">–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω</label>
              <input
                type="tel"
                id="phone"
                value={phone}
                onChange={handlePhoneChange}
                placeholder="+7 (999) 999-99-99"
                required
              />
            </div>
            
            <div className="contact-methods">
              <p>–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</p>
              <div className="method-options">
                <label className={`method-option ${contactMethod === 'call' ? 'active' : ''}`}>
                  <input
                    type="radio"
                    name="contactMethod"
                    checked={contactMethod === 'call'}
                    onChange={() => setContactMethod('call')}
                  />
                  <span className="option-icon">üìû</span>
                  <span className="option-text">–ü–æ–∑–≤–æ–Ω–∏—Ç—å</span>
                </label>
                
                <label className={`method-option ${contactMethod === 'telegram' ? 'active' : ''}`}>
                  <input
                    type="radio"
                    name="contactMethod"
                    checked={contactMethod === 'telegram'}
                    onChange={() => setContactMethod('telegram')}
                  />
                  <span className="option-icon">‚úàÔ∏è</span>
                  <span className="option-text">Telegram</span>
                </label>
                
                <label className={`method-option ${contactMethod === 'whatsapp' ? 'active' : ''}`}>
                  <input
                    type="radio"
                    name="contactMethod"
                    checked={contactMethod === 'whatsapp'}
                    onChange={() => setContactMethod('whatsapp')}
                  />
                  <span className="option-icon">üí¨</span>
                  <span className="option-text">WhatsApp</span>
                </label>
              </div>
            </div>
            
            {error && <div className="error-message">{error}</div>}
            
            <button 
              type="submit" 
              className="submit-button"
              disabled={isLoading}
            >
              {isLoading ? (
                <span className="loading-spinner"></span>
              ) : (
                '–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç'
              )}
            </button>
            
            <div className="form-footer">
              <p>–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</p>
            </div>
          </form>
        </>
      ) : (
        <div className="success-message">
          <div className="success-icon">‚úì</div>
          <h3>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!</h3>
          <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ {getContactMethodName(contactMethod).toLowerCase()}</p>
          <button 
            className="close-button"
            onClick={() => setIsSubmitted(false)}
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      )}
    </div>
  );
};

export default OrderFormShort;

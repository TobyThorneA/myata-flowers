// orderForm
import { useEffect, useState } from "react";
import "./popup.scss";

interface OrderFormProps {
  onClose: () => void;
}

interface FormData {
  name: string,
  phone: string,
  question1: string,
  question2: string,
  question3: string,
  honeypot: string,
}

const OrderForm = ({ onClose }: OrderFormProps) => {

  // –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–∫—Ä–æ–ª–ª–∞ –Ω–∞ –∞–π—Ñ–æ–Ω–µ
  useEffect(() => {
    const scrollY = window.scrollY;
    document.body.style.position = 'fixed';
    document.body.style.top = `-${scrollY}px`;
    document.body.style.left = '0';
    document.body.style.right = '0';
    document.body.style.overflow = 'hidden';
    document.body.style.width = '100%';

    return () => {
      const scrollY = document.body.style.top;
      document.body.style.position = '';
      document.body.style.top = '';
      document.body.style.left = '';
      document.body.style.right = '';
      document.body.style.overflow = '';
      document.body.style.width = '';
      window.scrollTo(0, parseInt(scrollY || '0') * -1);
    };
  }, []);

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ esc
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('keydown', handleEscape);

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [onClose]);

  const [isSubmitted, setIsSubmitted] = useState(false);

  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    question1: '',
    question2: '',
    question3: '',
    honeypot: '',
  });

  const sendToTelegram = async (data: FormData) => {
    if (data.honeypot && data.honeypot.trim() !== '') {
      console.warn('–ë–æ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
      return;
    }

    const chatId = '7911798658'; // chat_id
    const message = `
      üíê –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—É–∫–µ—Ç:
      üë§ –ò–º—è: ${data.name}
      üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
      üå∏ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${data.question1}
      üí∞ –ü–æ–≤–æ–¥: ${data.question2}
      üì¶ –ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é: ${data.question3}
    `.trim();


    try {
      const response = await fetch('/api.php', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          honeypot: data.honeypot,
          parse_mode: 'HTML',
        }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram');
      }

      console.log('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ Telegram:', error);
    }
  };

  const handleFormData = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {

    const {name, value} = e.target;

    setFormData((previos) => ({
      ...previos,
      [name]: value,
    }))
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    sendToTelegram(formData);
    setIsSubmitted(true);
  };

  return (
    <div className="popup-overlay" onClick={onClose}>
      <div className="popup" onClick={(e) => e.stopPropagation()}>
        <button className="popup__close" onClick={onClose}>√ó</button>

        {!isSubmitted ? (
          <form onSubmit={handleSubmit} className="popup__form">
            <h2>–ü–æ–¥–æ–±—Ä–∞—Ç—å –±—É–∫–µ—Ç</h2>
            <input
              type="text"
              name="honeypot"
              style={{ display: 'none' }}
              autoComplete="off"
              onChange={handleFormData}
            />
            <input onChange={handleFormData}
             type="text" name="name" placeholder="–ò–º—è" required />
            <input onChange={handleFormData} type="tel" name="phone" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" required />
            <textarea onChange={handleFormData} name="question1" placeholder="–ö–∞–∫–∏–µ —Ü–≤–µ—Ç—ã —Ö–æ—Ç–∏—Ç–µ?" required />
            <textarea onChange={handleFormData} name="question2" placeholder="–ü–æ–≤–æ–¥ / –∫–æ–º—É –¥–∞—Ä–∏—Ç–µ?" required />
            <textarea onChange={handleFormData} name="question3" placeholder="–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é" />
            <button type="submit">–ó–∞–∫–∞–∑–∞—Ç—å</button>
          </form>
        ) : (
          <div className="popup__success">
            <h2>–°–ø–∞—Å–∏–±–æ!</h2>
            <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üòä</p>
            <button onClick={onClose}>–ó–∞–∫—Ä—ã—Ç—å</button>
          </div>
        )}
      </div>
    </div>
  );
};

export default OrderForm;

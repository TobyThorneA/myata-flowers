// src/pages/AdminPanel.tsx
import React, { useState, useEffect } from "react";
import { useAppSelector, useAppDispatch } from "@store/app/hook";
import { type Bouquet } from "../../mocks/productsData";
import {
  addBouquet,
  updateBouquet,
  deleteBouquet,
  fetchBouquets,
} from "@store/slices/bouquetsSlice";
import "./adminPanel.scss";

const AdminPanel = () => {
  const dispatch = useAppDispatch();
  const bouquets = useAppSelector((state) => state.bouquets.items);

  const [localBouquets, setLocalBouquets] = useState<Bouquet[]>([]);
  const [authenticated, setAuthenticated] = useState(false);
  const [password, setPassword] = useState("");

  // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ redux –ª–∏–±–æ localStorage (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏)
  useEffect(() => {
    if (authenticated) {
      dispatch(fetchBouquets());
    }
  }, [authenticated, dispatch]);

  useEffect(() => {
  const draft = localStorage.getItem("admin_draft_bouquets");
  if (draft) {
    setLocalBouquets(JSON.parse(draft));
  } else {
    setLocalBouquets(bouquets);
  }
}, [bouquets]);

// üß† –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤ localStorage –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
useEffect(() => {
  const timeout = setTimeout(() => {
    localStorage.setItem("admin_draft_bouquets", JSON.stringify(localBouquets));
  }, 500); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ 500 –º—Å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

  return () => clearTimeout(timeout); // —Å–±—Ä–æ—Å –ø—Ä–∏ –Ω–æ–≤–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
}, [localBouquets]);

  const handleAuth = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      const res = await fetch(`${import.meta.env.VITE_API_URL}/api/admin/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }, 
        body: JSON.stringify({ password }),
      });

      if (res.ok) {
        setAuthenticated(true);
      } else {
        const error = await res.json();
        alert(error.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      console.error(err);
    }
  };


  // –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª—é–±–æ–≥–æ –ø–æ–ª—è –±—É–∫–µ—Ç–∞
  const handleChange = (
    id: string,
    field: keyof Bouquet,
    value: string | number | string[]
  ) => {
    setLocalBouquets((prev) =>
      prev.map((b) => (b._id === id ? { ...b, [field]: value } : b))
    );
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ URL –∏–∑ –º–∞—Å—Å–∏–≤–∞ images
  const handleImageChange = (bouquetId: string, index: number, value: string) => {
    setLocalBouquets((prev) =>
      prev.map((b) => {
        if (b._id !== bouquetId) return b;
        const newImages = [...(b.images || [])];
        newImages[index] = value;
        return { ...b, images: newImages };
      })
    );
  };

  // –î–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π URL –≤ –º–∞—Å—Å–∏–≤ images
  const handleAddImage = (bouquetId: string) => {
    setLocalBouquets((prev) =>
      prev.map((b) => {
        if (b._id !== bouquetId) return b;
        const newImages = [...(b.images || []), ""];
        return { ...b, images: newImages };
      })
    );
  };

  // –£–¥–∞–ª–∏—Ç—å URL –∏–∑ –º–∞—Å—Å–∏–≤–∞ images
  const handleRemoveImage = (bouquetId: string, index: number) => {
    setLocalBouquets((prev) =>
      prev.map((b) => {
        if (b._id !== bouquetId) return b;
        const newImages = [...(b.images || [])];
        newImages.splice(index, 1);
        return { ...b, images: newImages };
      })
    );
  };

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±—É–∫–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º UUID
  const handleAdd = () => {
    const newBouquet: Bouquet = {
      _id: crypto.randomUUID(),
      name: "",
      price: 0,
      oldprice: 0,
      images: [],
      size: "",
      description: "",
      __v: 0,
    };
    setLocalBouquets((prev) => [newBouquet, ...prev]);
  };

  // –£–¥–∞–ª–∏—Ç—å –±—É–∫–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const handleDelete = (id: string) => {
    setLocalBouquets((prev) => prev.filter((b) => b._id !== id));
    if (id.length !== 36) {
      // –ï—Å–ª–∏ –Ω–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π (–Ω–µ UUID), —É–¥–∞–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      dispatch(deleteBouquet(id));
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–∫–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (—Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å)
const handleSave = (bouquetToSave: Bouquet) => {
  const id = bouquetToSave._id;

  if (id.length === 36) {
    // –ù–æ–≤—ã–π –±—É–∫–µ—Ç ‚Äî –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º _id –∏ __v –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏ —Å–æ–∑–¥–∞—ë–º data –±–µ–∑ –Ω–∏—Ö
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { _id, __v, ...dataToCreate } = bouquetToSave;

    dispatch(addBouquet(dataToCreate as Omit<Bouquet, "_id" | "__v">));
  } else {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±—É–∫–µ—Ç–∞
    dispatch(updateBouquet({ id, data: bouquetToSave }));
  }
};

  if (!authenticated) {
    return (
      <form className="admin-login" onSubmit={handleAuth}>
        <h2>–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É</h2>
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          placeholder="–ü–∞—Ä–æ–ª—å"
        />
        <button type="submit">–í–æ–π—Ç–∏</button>
      </form>
    );
  }

  return (
    <div className="admin-panel">
      <h1>–ê–¥–º–∏–Ω–∫–∞: –ë—É–∫–µ—Ç—ã</h1>
      <button onClick={handleAdd}>‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—É–∫–µ—Ç</button>
      {localBouquets.map((bouquet) => (
        <div className="admin-card" key={bouquet._id}>
          <input
            value={bouquet.name}
            onChange={(e) => handleChange(bouquet._id, "name", e.target.value)}
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
          />
          <input
            value={bouquet.price}
            onChange={(e) =>
              handleChange(bouquet._id, "price", +e.target.value || 0)
            }
            placeholder="–¶–µ–Ω–∞"
            type="number"
          />
          <input
            value={bouquet.oldprice}
            onChange={(e) =>
              handleChange(bouquet._id, "oldprice", +e.target.value || 0)
            }
            placeholder="–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞"
            type="number"
          />
          <input
            value={bouquet.size}
            onChange={(e) => handleChange(bouquet._id, "size", e.target.value)}
            placeholder="–†–∞–∑–º–µ—Ä"
          />
          <textarea
            value={bouquet.description || ""}
            onChange={(e) =>
              handleChange(bouquet._id, "description", e.target.value)
            }
            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
          />

          {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ */}
          <div>
            <label>–§–æ—Ç–æ:</label>
            {(bouquet.images || []).map((img, i) => (
              <div
                key={i}
                style={{ display: "flex", gap: "8px", marginBottom: "6px" }}
              >
                <input
                  type="text"
                  value={img}
                  onChange={(e) =>
                    handleImageChange(bouquet._id, i, e.target.value)
                  }
                  placeholder="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                  style={{ flexGrow: 1 }}
                />
                <button
                  type="button"
                  onClick={() => handleRemoveImage(bouquet._id, i)}
                >
                  ‚ùå
                </button>
              </div>
            ))}
            <button type="button" onClick={() => handleAddImage(bouquet._id)}>
              ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            </button>
          </div>

          <div style={{ marginTop: 10, display: "flex", gap: "8px" }}>
            <button onClick={() => handleSave(bouquet)}>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button onClick={() => handleDelete(bouquet._id)}>üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
          </div>
        </div>
      ))}
    </div>
  );
};

export default AdminPanel;


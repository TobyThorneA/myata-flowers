 // src/pages/AdminPanel.tsx
import React, { useState, useEffect } from "react";
import { useAppSelector, useAppDispatch } from "@store/app/hook";
import { type Bouquet } from "../../mocks/productsData";
import {
  addBouquet,
  updateBouquet,
  deleteBouquet,
  fetchBouquets,
} from "@store/slices/bouquetsSlice";
import "./adminPanel.scss";

const AdminPanel = () => {
  const dispatch = useAppDispatch();
  const bouquets = useAppSelector((state) => state.bouquets.items);

  const [localBouquets, setLocalBouquets] = useState<Bouquet[]>([]);
  const [authenticated, setAuthenticated] = useState(false);
  const [password, setPassword] = useState("");

  // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –±—É–∫–µ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    if (authenticated) {
      dispatch(fetchBouquets());
      // –¢–∞–∫–∂–µ –æ—á–∏—Å—Ç–∏–º draft, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª—Å—è —Å—Ç–∞—Ä—ã–π
      localStorage.removeItem("admin_draft_bouquets");
    }
  }, [authenticated, dispatch]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º localBouquets —Å bouquets –∏–∑ redux –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ (–í–ê–†–ò–ê–ù–¢ 2)
  useEffect(() => {
    if (authenticated) {
      setLocalBouquets(bouquets);
      // –û—á–∏—Å—Ç–∏–º draft –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞,
      // —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–º–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏
      localStorage.removeItem("admin_draft_bouquets");
    }
  }, [bouquets, authenticated]);

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤ localStorage –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ localBouquets
  useEffect(() => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω,
    // —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏ –¥–æ –≤—Ö–æ–¥–∞
    if (authenticated) {
      const timeout = setTimeout(() => {
        localStorage.setItem("admin_draft_bouquets", JSON.stringify(localBouquets));
      }, 500);
      return () => clearTimeout(timeout);
    }
  }, [localBouquets, authenticated]);

  const handleAuth = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      const res = await fetch(`${import.meta.env.VITE_API_URL}/api/admin/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }, 
        body: JSON.stringify({ password }),
      });

      if (res.ok) {
        setAuthenticated(true);
      } else {
        const error = await res.json();
        alert(error.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      console.error(err);
    }
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–æ–ª—è –±—É–∫–µ—Ç–∞ –≤ localBouquets
  const handleChange = (
    id: string,
    field: keyof Bouquet,
    value: string | number | string[]
  ) => {
    setLocalBouquets((prev) =>
      prev.map((b) => (b._id === id ? { ...b, [field]: value } : b))
    );
  };

  const handleImageChange = (bouquetId: string, index: number, value: string) => {
    setLocalBouquets((prev) =>
      prev.map((b) => {
        if (b._id !== bouquetId) return b;
        const newImages = [...(b.images || [])];
        newImages[index] = value;
        return { ...b, images: newImages };
      })
    );
  };

  const handleAddImage = (bouquetId: string) => {
    setLocalBouquets((prev) =>
      prev.map((b) => {
        if (b._id !== bouquetId) return b;
        const newImages = [...(b.images || []), ""];
        return { ...b, images: newImages };
      })
    );
  };

  const handleRemoveImage = (bouquetId: string, index: number) => {
    setLocalBouquets((prev) =>
      prev.map((b) => {
        if (b._id !== bouquetId) return b;
        const newImages = [...(b.images || [])];
        newImages.splice(index, 1);
        return { ...b, images: newImages };
      })
    );
  };

  const handleAdd = () => {
    const newBouquet: Bouquet = {
      _id: `temp_${crypto.randomUUID()}`,
      name: "",
      price: 0,
      oldprice: 0,
      images: [],
      size: "",
      description: "",
      __v: 0,
    };
    setLocalBouquets((prev) => [newBouquet, ...prev]);
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –±—É–∫–µ—Ç–∞: –µ—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π, –ø—Ä–æ—Å—Ç–æ –∏–∑ local, –∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ redux + API
  const handleDelete = (id: string) => {
    if (id.startsWith("temp_")) {
      setLocalBouquets((prev) => prev.filter((b) => b._id !== id));
    } else {
      dispatch(deleteBouquet(id))
        .unwrap()
        .then(() => {
          // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∏–º –±—É–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          dispatch(fetchBouquets());
          // –û—á–∏—Å—Ç–∏–º draft –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
          localStorage.removeItem("admin_draft_bouquets");
        })
        .catch((err) => {
          alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—É–∫–µ—Ç–∞");
          console.error(err);
        });
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É–∫–µ—Ç–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  const handleSave = (bouquetToSave: Bouquet) => {
    if (bouquetToSave._id.startsWith("temp_")) {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { _id, __v, ...dataToCreate } = bouquetToSave;
      dispatch(addBouquet(dataToCreate))
        .unwrap()
        .then(() => {
          dispatch(fetchBouquets());
          localStorage.removeItem("admin_draft_bouquets");
        })
        .catch((err) => {
          alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±—É–∫–µ—Ç–∞");
          console.error(err);
        });
    } else {
      dispatch(updateBouquet({ id: bouquetToSave._id, data: bouquetToSave }))
        .unwrap()
        .then(() => {
          dispatch(fetchBouquets());
          localStorage.removeItem("admin_draft_bouquets");
        })
        .catch((err) => {
          alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—É–∫–µ—Ç–∞");
          console.error(err);
        });
    }
  };

  if (!authenticated) {
    return (
      <form className="admin-login" onSubmit={handleAuth}>
        <h2>–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É</h2>
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          placeholder="–ü–∞—Ä–æ–ª—å"
        />
        <button type="submit">–í–æ–π—Ç–∏</button>
      </form>
    );
  }

  return (
    <div className="admin-panel">
      <h1>–ê–¥–º–∏–Ω–∫–∞: –ë—É–∫–µ—Ç—ã</h1>
      <button onClick={handleAdd}>‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—É–∫–µ—Ç</button>
      {localBouquets.map((bouquet) => (
        <div className="admin-card" key={bouquet._id}>
          <input
            value={bouquet.name}
            onChange={(e) => handleChange(bouquet._id, "name", e.target.value)}
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
          />
          <input
            value={bouquet.price}
            onChange={(e) =>
              handleChange(bouquet._id, "price", +e.target.value || 0)
            }
            placeholder="–¶–µ–Ω–∞"
            type="number"
          />
          <input
            value={bouquet.oldprice}
            onChange={(e) =>
              handleChange(bouquet._id, "oldprice", +e.target.value || 0)
            }
            placeholder="–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞"
            type="number"
          />
          <input
            value={bouquet.size}
            onChange={(e) => handleChange(bouquet._id, "size", e.target.value)}
            placeholder="–†–∞–∑–º–µ—Ä"
          />
          <textarea
            value={bouquet.description || ""}
            onChange={(e) =>
              handleChange(bouquet._id, "description", e.target.value)
            }
            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
          />

          <div>
            <label>–§–æ—Ç–æ:</label>
            {(bouquet.images || []).map((img, i) => (
              <div
                key={i}
                style={{ display: "flex", gap: "8px", marginBottom: "6px" }}
              >
                <input
                  type="text"
                  value={img}
                  onChange={(e) =>
                    handleImageChange(bouquet._id, i, e.target.value)
                  }
                  placeholder="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                  style={{ flexGrow: 1 }}
                />
                <button
                  type="button"
                  onClick={() => handleRemoveImage(bouquet._id, i)}
                >
                  ‚ùå
                </button>
              </div>
            ))}
            <button type="button" onClick={() => handleAddImage(bouquet._id)}>
              ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            </button>
          </div>

          <div style={{ marginTop: 10, display: "flex", gap: "8px" }}>
            <button onClick={() => handleSave(bouquet)}>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button onClick={() => handleDelete(bouquet._id)}>üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
          </div>
        </div>
      ))}
    </div>
  );
};

export default AdminPanel;




// import React, { useState, useEffect } from "react";
// import { useAppSelector, useAppDispatch } from "@store/app/hook";
// import { type Bouquet } from "../../mocks/productsData";
// import {
//   addBouquet,
//   updateBouquet,
//   deleteBouquet,
//   fetchBouquets,
// } from "@store/slices/bouquetsSlice";
// import "./adminPanel.scss";

// const AdminPanel = () => {
//   const dispatch = useAppDispatch();
//   const bouquets = useAppSelector((state) => state.bouquets.items);

//   const [localBouquets, setLocalBouquets] = useState<Bouquet[]>([]);
//   const [authenticated, setAuthenticated] = useState(false);
//   const [password, setPassword] = useState("");

//   // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ redux –ª–∏–±–æ localStorage (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏)
//   useEffect(() => {
//     if (authenticated) {
//       dispatch(fetchBouquets());
//     }
//   }, [authenticated, dispatch]);

//   useEffect(() => {
//   const draft = localStorage.getItem("admin_draft_bouquets");
//   if (draft) {
//     setLocalBouquets(JSON.parse(draft));
//   } else {
//     setLocalBouquets(bouquets);
//   }
// }, [bouquets]);

// // üß† –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤ localStorage –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
// useEffect(() => {
//   const timeout = setTimeout(() => {
//     localStorage.setItem("admin_draft_bouquets", JSON.stringify(localBouquets));
//   }, 500); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ 500 –º—Å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

//   return () => clearTimeout(timeout); // —Å–±—Ä–æ—Å –ø—Ä–∏ –Ω–æ–≤–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
// }, [localBouquets]);

//   const handleAuth = async (e: React.FormEvent) => {
//     e.preventDefault();

//     try {
//       const res = await fetch(`${import.meta.env.VITE_API_URL}/api/admin/login`, {
//         method: 'POST',
//         headers: { 'Content-Type': 'application/json' }, 
//         body: JSON.stringify({ password }),
//       });

//       if (res.ok) {
//         setAuthenticated(true);
//       } else {
//         const error = await res.json();
//         alert(error.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
//       }
//     } catch (err) {
//       alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
//       console.error(err);
//     }
//   };


//   // –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª—é–±–æ–≥–æ –ø–æ–ª—è –±—É–∫–µ—Ç–∞
//   const handleChange = (
//     id: string,
//     field: keyof Bouquet,
//     value: string | number | string[]
//   ) => {
//     setLocalBouquets((prev) =>
//       prev.map((b) => (b._id === id ? { ...b, [field]: value } : b))
//     );
//   };

//   // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ URL –∏–∑ –º–∞—Å—Å–∏–≤–∞ images
//   const handleImageChange = (bouquetId: string, index: number, value: string) => {
//     setLocalBouquets((prev) =>
//       prev.map((b) => {
//         if (b._id !== bouquetId) return b;
//         const newImages = [...(b.images || [])];
//         newImages[index] = value;
//         return { ...b, images: newImages };
//       })
//     );
//   };

//   // –î–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π URL –≤ –º–∞—Å—Å–∏–≤ images
//   const handleAddImage = (bouquetId: string) => {
//     setLocalBouquets((prev) =>
//       prev.map((b) => {
//         if (b._id !== bouquetId) return b;
//         const newImages = [...(b.images || []), ""];
//         return { ...b, images: newImages };
//       })
//     );
//   };

//   // –£–¥–∞–ª–∏—Ç—å URL –∏–∑ –º–∞—Å—Å–∏–≤–∞ images
//   const handleRemoveImage = (bouquetId: string, index: number) => {
//     setLocalBouquets((prev) =>
//       prev.map((b) => {
//         if (b._id !== bouquetId) return b;
//         const newImages = [...(b.images || [])];
//         newImages.splice(index, 1);
//         return { ...b, images: newImages };
//       })
//     );
//   };

//   // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±—É–∫–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º UUID
//   const handleAdd = () => {
//     const newBouquet: Bouquet = {
//       _id: `temp_${crypto.randomUUID()}`,
//       name: "",
//       price: 0,
//       oldprice: 0,
//       images: [],
//       size: "",
//       description: "",
//       __v: 0,
//     };
//     setLocalBouquets((prev) => [newBouquet, ...prev]);
//   };

//   // –£–¥–∞–ª–∏—Ç—å –±—É–∫–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
// const handleDelete = (id: string) => {
//   if (id.startsWith("temp_")) {
//     // –£–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Ç.–∫. –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ–≥–æ –Ω–µ—Ç
//     setLocalBouquets((prev) => prev.filter((b) => b._id !== id));
//   } else {
//     // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ redux –∏ API, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
//     dispatch(deleteBouquet(id));
//   }
// };

//   // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–∫–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (—Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å)
// const handleSave = (bouquetToSave: Bouquet) => {

//   // startsWith("temp_") ‚Äî —É—Å–ª–æ–≤–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –±—É–∫–µ—Ç–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º id, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
//   if (bouquetToSave._id.startsWith("temp_")) {
//   // –ù–æ–≤—ã–π –±—É–∫–µ—Ç ‚Äî –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º _id –∏ __v –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏ —Å–æ–∑–¥–∞—ë–º data –±–µ–∑ –Ω–∏—Ö
//   // dataToCreate ‚Äî –æ–±—ä–µ–∫—Ç –±–µ–∑ _id –∏ __v, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º id.
//   // eslint-disable-next-line @typescript-eslint/no-unused-vars
//   const { _id, __v, ...dataToCreate } = bouquetToSave;
//   dispatch(addBouquet(dataToCreate));
// } else {
//   // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (updateBouquet) –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π _id.
//   dispatch(updateBouquet({ id: bouquetToSave._id, data: bouquetToSave }));
// }

// };



//   if (!authenticated) {
//     return (
//       <form className="admin-login" onSubmit={handleAuth}>
//         <h2>–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É</h2>
//         <input
//           type="password"
//           value={password}
//           onChange={(e) => setPassword(e.target.value)}
//           placeholder="–ü–∞—Ä–æ–ª—å"
//         />
//         <button type="submit">–í–æ–π—Ç–∏</button>
//       </form>
//     );
//   }

//   return (
//     <div className="admin-panel">
//       <h1>–ê–¥–º–∏–Ω–∫–∞: –ë—É–∫–µ—Ç—ã</h1>
//       <button onClick={handleAdd}>‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—É–∫–µ—Ç</button>
//       {localBouquets.map((bouquet) => (
//         <div className="admin-card" key={bouquet._id}>
//           <input
//             value={bouquet.name}
//             onChange={(e) => handleChange(bouquet._id, "name", e.target.value)}
//             placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
//           />
//           <input
//             value={bouquet.price}
//             onChange={(e) =>
//               handleChange(bouquet._id, "price", +e.target.value || 0)
//             }
//             placeholder="–¶–µ–Ω–∞"
//             type="number"
//           />
//           <input
//             value={bouquet.oldprice}
//             onChange={(e) =>
//               handleChange(bouquet._id, "oldprice", +e.target.value || 0)
//             }
//             placeholder="–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞"
//             type="number"
//           />
//           <input
//             value={bouquet.size}
//             onChange={(e) => handleChange(bouquet._id, "size", e.target.value)}
//             placeholder="–†–∞–∑–º–µ—Ä"
//           />
//           <textarea
//             value={bouquet.description || ""}
//             onChange={(e) =>
//               handleChange(bouquet._id, "description", e.target.value)
//             }
//             placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
//           />

//           {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ */}
//           <div>
//             <label>–§–æ—Ç–æ:</label>
//             {(bouquet.images || []).map((img, i) => (
//               <div
//                 key={i}
//                 style={{ display: "flex", gap: "8px", marginBottom: "6px" }}
//               >
//                 <input
//                   type="text"
//                   value={img}
//                   onChange={(e) =>
//                     handleImageChange(bouquet._id, i, e.target.value)
//                   }
//                   placeholder="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
//                   style={{ flexGrow: 1 }}
//                 />
//                 <button
//                   type="button"
//                   onClick={() => handleRemoveImage(bouquet._id, i)}
//                 >
//                   ‚ùå
//                 </button>
//               </div>
//             ))}
//             <button type="button" onClick={() => handleAddImage(bouquet._id)}>
//               ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
//             </button>
//           </div>

//           <div style={{ marginTop: 10, display: "flex", gap: "8px" }}>
//             <button onClick={() => handleSave(bouquet)}>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
//             <button onClick={() => handleDelete(bouquet._id)}>üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
//           </div>
//         </div>
//       ))}
//     </div>
//   );
// };

// export default AdminPanel;

